
name: Test, Package, Deploy
on: [push]
jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    services:
      zookeeper:
        image: confluentinc/cp-zookeeper:5.2.4
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000

      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: asdfasdf
          POSTGRES_DB: eil_db_1
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      kafka:
        image: confluentinc/cp-kafka:5.3.1
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
          KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          JMX_PORT: 9997
          KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka0 -Dcom.sun.management.jmxremote.rmi.port=9997


    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 18
        uses: actions/setup-java@v1
        with:
          java-version: 1.18
      - name: Gradle Build
        run: ./gradlew build
        env:
          HOSTNAME: localhost
          JWT_SECRET: asdfasdf
          AWS_ACCESS_KEY_ID: asdf
          AWS_SECRET_ACCESS_KEY: asdf
          DB_DOMAIN: localhost
          DB_USERNAME: postgres
          DB_DATABASE: eil_db_1
          DB_PASSWORD: asdfasdf
          S3_URL_PREFIX: asdf
          KAFKA_BOOTSTRAP: "localhost:9092"
      - name: Gradle Package BootJar
        run: ./gradle bootJar